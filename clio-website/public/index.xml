<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLIO: Coordination Language for IO on CLIO</title>
    <link>http://localhost:1313/index.html</link>
    <description>Recent content in CLIO: Coordination Language for IO on CLIO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Semantics</title>
      <link>http://localhost:1313/semantics/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/semantics/index.html</guid>
      <description>In this section, we introduce the streaming semantics that allow a CLIO implementation to transform a batch, file-based workflow into an in-situ workflow (i.e., a workflow where all steps are executed concurrently). To establish the file synchronization semantics between consecutive workflow steps, two temporal aspects should be considered:
Determining when there are no further updates to the file, referred to as the commit rule Identifying when a consumer can safely start reading a portion of data written in the file, known as the firing rule In the following, we describe the semantics of the commit rule and then the semantics of the firing rule</description>
    </item>
    <item>
      <title>Configuration file</title>
      <link>http://localhost:1313/configuration_file/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configuration_file/index.html</guid>
      <description>A valid CLIO configuration file is comprised of five different sections:
Workflow name: identifies the application workflow composed by multiple application modules. IO_Graph: describes file data dependencies among application modules. Alias: groups under a convenient name a set of files or directories. Permanent: defines which files must be kept on the permanent storage at the end of the workflow execution. Exclude: identifies the files and directories not handled by CAPIO. Home Node Policy: defines different file mapping policies to establish which CAPIO servers store which files Validating a configuration file To validate a custom configuration file, we provide a JSON schema that you can validate against with.</description>
    </item>
    <item>
      <title>Examples</title>
      <link>http://localhost:1313/examples/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/examples/index.html</guid>
      <description>In this section, we introduce how to express the commit and firing semantics using the CLIO coordination language, providing simple examples.
[!NOTE] For the following instances, we consider a workflow comprising two applications: an application called writer that produces two files and an application called reader, that reads these two files.
Typically, this straightforward workflow is executed in a classic batch execution. First, the writer application is launched to produce the input files for the reader application.</description>
    </item>
  </channel>
</rss>